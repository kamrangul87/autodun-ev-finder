Goal: Ship a production-ready MVP of Autodun EV Finder with real OpenChargeMap data across the visible map viewport, stable markers and heatmap, proper council overlays + council markers, and a real feedback form. Make the UX smooth, fast, and consistent at all zoom levels.

0) Quick audit & guardrails

Keep the current file structure and working features.

No breaking changes to the build/deploy workflow. Keep Node 20, Next.js 14.

Existing env vars stay server-side only.

Maintain URL state params (heat, markers, council, q) and update them as the user toggles UI.

1) Data source (OpenChargeMap) ‚Äî fetch what‚Äôs in view, not just London

Problem observed: Stations/heatmap cluster around central London; on initial load, only heatmap appears; markers flicker or appear only after zooming; outside areas lack data.

Fix plan:

Viewport-driven fetch

On map move/zoom end, compute the current map bounds (south, west, north, east).

Call OpenChargeMap with a bounding box (or lat/lng + distance derived from bounds center and diagonal).

Use pagination / multiple requests to cover up to ~2,000 points per viewport (cap and merge).

De-duplicate by station ID.

Scale by zoom

For zoom ‚â§ 9, fetch a reduced max-results per request (e.g., 500) to keep performance responsive.

For zoom ‚â• 10, allow up to ~1,000‚Äì2,000 points total across pages (still capped).

Normalization

Keep using the existing normalizer (id, lat, lng, name, address/postcode, connectors).

Provide connectors = NumberOfPoints || Connections.length || 1.

Tag source: 'OPENCHARGE'.

Throttling & caching

Throttle map-refresh calls (e.g., 300ms after pan/zoom ends).

Cache results per tile key or rounded bbox for 60s to avoid redundant calls during minor pans.

Env/config

Continue using server-side API key via existing env vars (e.g., OCM_API_KEY).

Keep demo/static fallback if OCM fails.

Acceptance checks

Panning around Greater London, SE/NE England, and Wales shows stations and heatmap without needing a manual refresh/zoom trick.

First load shows both markers and heatmap (if toggled on).

No console/network spam; OCM requests scale with viewport and are throttled.

2) Map rendering ‚Äî stable layers (no flicker), both heatmap & markers always available

Problems observed: Heatmap shows first; markers pop in/out; layers ‚Äúdrift‚Äù or re-create on interaction.

Fix plan:

Layer separation & persistence

Keep three independent Leaflet layers:

Markers layer (React-Leaflet, clustered if necessary for performance).

Heatmap layer (leaflet.heat, derived from the same station set).

Council polygon layer (GeoJSON).

Do not unmount/remount layers on state changes. Toggle their visibility via .addTo(map) / map.removeLayer(layer) or conditional rendering that preserves refs.

Marker stability

Don‚Äôt regenerate markers on each keystroke/pan; only update on debounced viewport fetch completion.

Use a stable key (station id) and a stable data ref to prevent flicker.

Heatmap

Update heatmap points in place; scale intensity by Math.min(1, connectors / 10) (or similar).

At low zoom (‚â§ 9), coarsen heatmap to improve performance.

Initial load

After map initializes and reads URL params, immediately fetch by current viewport, then render both layers according to toggles.

Acceptance checks

Toggling Heatmap/Markers does not cause re-panning, drift, or layer flicker.

While panning, previous markers stay until new data arrives; when new data lands, swap smoothly.

3) Councils ‚Äî better layer + distinct markers + details popup

Problems observed: Council overlay effects look similar to stations; few features visible; need clearer affordances.

Fix plan:

Styling

Polygons: keep an orange stroke (e.g., #ff6b35, weight 2), low fill opacity (0.1‚Äì0.15).

Council markers: add centroid markers (distinct shape/color from station markers, e.g., purple square or diamond). Do not reuse station pin color.

Popups

On council marker click: show a popup with:

Borough name.

Count of stations currently visible within that council (computed from the current stations set + polygon containment).

Button: ‚ÄúZoom to borough‚Äù (fits bounds to polygon).

On polygon hover: show tooltip with borough name (as already).

Counts & filtering

Each time stations refresh, recompute per-council counts for popup use.

Acceptance checks

Council markers have different color/shape than stations.

Clicking a council shows a count and Zoom to borough.

Counts update as viewport/zoom changes and station set updates.

4) Search & ‚ÄúZoom to data‚Äù polish

Search uses postcodes.io first, falls back to Nominatim; center map to result at zoom 14‚Äì15; show a small temporary ‚Äúfound‚Äù marker for context.

Zoom to data:

Fits bounds to current station markers; handle case with no stations gracefully (toast ‚ÄúNo stations in view yet. Try zooming in or panning.‚Äù).

URL state

Persist heat, markers, council, and q in the URL; restore on reload.

Acceptance checks

Entering a postcode pans/zooms correctly; toggles remain as chosen.

‚ÄúZoom to data‚Äù works across any area (not only central London).

5) Feedback form (popup ‚Üí modal) + logging for future ML

Problems observed: Current popup ‚Äúüëç Feedback‚Äù is too simple; we need structured data.

Fix plan:

Popup button ‚Üí opens a modal with:

Quick rating: Good / Bad (radio or emoji).

Optional comment (up to 500 chars).

Hidden fields: stationId, timestamp, lat/lng (pre-filled).

Submit button (disabled until rating selected).

Show toast ‚ÄúThanks for your feedback!‚Äù on success.

API route /api/feedback

Keep body validation server-side.

Log to in-memory store as now; additionally append a minimal JSONL entry to disk (/tmp/feedback.log in Replit; or leave TODO if storage constraints).

Fields: {stationId, rating, comment, ts, lat, lng, source, zoom, viewportBBox}.

Privacy

Do not collect PII. Do not log IP/userAgent to disk.

Acceptance checks

Feedback modal works on any station.

API returns OK, and an entry is recorded.

No unhandled errors on fast repeated clicks.

6) Performance & UX details

Debounce viewport fetches (300‚Äì500 ms).

Cancel in-flight requests when a new pan/zoom fetch starts.

Skeleton/loader stripe at the top when fetching, not blocking map interaction.

No freezing at zoom levels 5‚Äì13 with 1k+ points.

Keep bundle size reasonable; don‚Äôt add large libs without need.

7) Config / env

Use existing env vars. If you create a new one, document it here in the PR note and keep it server-side only.

Default STATIONS=OPENCHARGE in Replit for production. Keep DEMO as fallback.

8) QA script (run this before handing off)

Load app fresh (no query): both heatmap+markers appear around London with 500‚Äì1000 points.

Pan north to Leeds: new data appears; no flicker; heatmap/markers align.

Toggle heatmap off, pan to Birmingham: markers stay stable; counts update; ‚ÄúZoom to data‚Äù fits marker cluster.

Toggle council on: see orange polygons + purple council markers. Click a council marker ‚Üí popup shows name + station count + Zoom; zoom works.

Search ‚ÄúSW1A 1AA‚Äù ‚Üí map centers at 14; toggles persist.

Click a station ‚Üí open Feedback modal, submit Good + short note. See success toast; no console errors.

Reload page ‚Üí URL state (toggles + query) restored.

9) Deliverables

All changes committed with message:
feat: viewport OCM fetch + stable layers + council markers + feedback modal

Short README note at top with:

Data limits (pagination caps).

How feedback is stored.

Known future work (rate limits, ML pipeline).

10) Definition of Done ‚úÖ

Stations & heatmap load anywhere you pan/zoom in the UK, not only central London.

No flicker / ‚Äúdrift‚Äù; layers feel solid.

Councils have distinct markers and useful popups.

Feedback modal works and logs structured entries.

Zero console errors in production preview.

Build passes and deploy is ready.