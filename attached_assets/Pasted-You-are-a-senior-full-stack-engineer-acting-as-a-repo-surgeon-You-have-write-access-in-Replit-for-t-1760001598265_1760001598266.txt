You are a senior full-stack engineer acting as a repo surgeon. You have write access in Replit for the project Autodun EV Finder. Your job is to produce a clean, production-ready MVP that works in Replit (preview + published) and Vercel.

Context (Current State)

Framework: Next.js 14 Pages Router (keep it that way).

Map: Leaflet works in Replit; tiles are OSM. Heatmap toggle exists.

UI: Search box, toggles (Heatmap / Markers / Council), “Zoom to data”, “Refresh”, banner shows current source and station count.

Problem: Production (Vercel) sometimes shows blank map or old build; stations fall back to DEMO; “live” OpenChargeMap (OCM) isn’t wired reliably; duplicate “pages vs app” happened in the past; next.config.js ESM/CJS mismatch caused builds to fail.

Goal: Finalize a single, consistent Pages Router app with working live station data via OCM, resilient fallbacks (STATIC → DEMO), stable map rendering in prod, and simple deploy steps.

Hard Requirements

Keep Pages Router only. If an /app directory exists, remove it. Do not reintroduce App Router.

Fix config: Use ESM next.config.mjs (not next.config.js) because package.json may have "type":"module".

Stations API (server-side): Implement /pages/api/stations.ts that reads:

STATIONS = OPENCHARGE | STATIC | DEMO (default DEMO)

OCD_API_KEY (OpenChargeMap key)

STATIONS_URL (optional custom JSON)

Fallback order: chosen source → STATIC → DEMO.

Normalize to a common shape: { id, lat, lng, name, address, postcode, connectors, source }.

Search API (client-side): Use postcodes.io first; fallback to Nominatim (OSM). No API keys needed.

Council overlay: Load /public/data/london-councils.geojson. Keep a toggle.

Heatmap: Use leaflet.heat (dynamic import on client only). Make sure map height is set and SSR safeguards are in place.

No duplicate files. Remove any old duplicates that conflict (e.g., Pages vs App copies, or extra API routes).

Env variables (Vercel + Replit):

STATIONS=OPENCHARGE (for live)

OCD_API_KEY=... (your OCM key)

Optional: STATIONS_URL=... (for CUSTOM_URL if you add it)

Optional: NEXT_PUBLIC_TILE_URL=https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png

Build/runtime: Node 20. Ensure leaflet.heat is in deps. No build errors, no console errors in prod.

UI polish: Banner should show Source and Stations count. Map must render in Vercel reliably (CSS height, client-only Leaflet usage).

Deliverables

A single unified Git patch (in one ```diff block) that:

Creates/updates:

/lib/data-sources.ts (fetch from OCM, STATIC, DEMO; normalize; fallbacks)

/lib/postcode-search.ts (postcodes.io + Nominatim fallback)

/utils/url-state.ts

/pages/api/stations.ts (server)

/pages/api/feedback.ts (simple in-memory)

/components/Map.tsx (client-only, heatmap layer, markers, council layer, stable height)

/pages/index.tsx (main UI; toggles; calls /api/stations; shows source/count)

/public/data/static-stations.json

/public/data/london-councils.geojson

/scripts/test-mvp.sh (quick sanity test)

next.config.mjs (ESM; minimal)

Removes any /app directory and any duplicate api/pages.

Adds "leaflet.heat" to package.json dependencies.

A short RUN BOOK with copy-paste commands (Replit shell) to verify and deploy.

Implementation Details

OpenChargeMap (server side, in /api/stations via lib/data-sources):

Endpoint: https://api.openchargemap.io/v3/poi/

Query: countrycode=GB&latitude=51.5074&longitude=-0.1278&distance=50&maxresults=500&compact=true&verbose=false

Header: Accept: application/json

Add key=${process.env.OCD_API_KEY}.

Normalize using fields like AddressInfo.Latitude/Longitude/Title/Postcode, NumberOfPoints or Connections.length.

STATIC loads /public/data/static-stations.json.

DEMO has ~5 stations around London (include a small array).

Map SSR: dynamic(() => import('...'), { ssr: false }) for Map component in pages/index.tsx. In the map, guard any Leaflet window/document access. Ensure container height: 100% of a parent that has a fixed viewport height (e.g., height: calc(100vh - headerHeight)).

Heatmap: dynamically import leaflet.heat inside a useEffect. Add/remove layer on dependencies.

UI state persisted in query params via utils/url-state.ts.

Types: Prefer TS (.ts/.tsx) where reasonable. If the repo is all JS, feel free to keep JS, but be consistent.

Output Format (very important)

First output a single fenced code block with language diff that contains the entire patch.

After the patch, output a minimal Run Book with exact commands to run in Replit and to verify /api/stations.

Do not ask questions—make reasonable choices and finish.

Acceptance Criteria (check these before you finish)

Replit preview shows the map and markers by default (no blank map).

Changing STATIONS=OPENCHARGE and adding a valid OCD_API_KEY returns a count > 0 and banner shows Source: OPENCHARGE.

Toggling Heatmap/Markers/Council works; “Zoom to data” fits bounds.

Search works for a UK postcode (e.g., SW1A 1AA) and centers the map.

/api/stations is server-side and does not leak the OCM key to the client.

Build succeeds in Vercel with next.config.mjs (no ESM/CJS error), Node 20, Leaflet loads, no duplicate router files.

scripts/test-mvp.sh passes.

No console errors in production.

Run Book (what you should include at the end)

Replit shell commands to install, test, and run:

npm i
npm run build
npm run dev


Quick curl to verify server route after setting env vars:

# In Replit "Secrets", add STATIONS=OPENCHARGE and OCD_API_KEY=...
curl -s http://localhost:3000/api/stations | head


Deploy note for Vercel: set STATIONS=OPENCHARGE, OCD_API_KEY, optional NEXT_PUBLIC_TILE_URL, ensure Production Branch matches your branch; pushing triggers deploy.

Now, produce the complete patch and run book.